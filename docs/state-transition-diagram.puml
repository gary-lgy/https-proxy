@startuml

legend top left
We adopt the standard notation in state transition diagrams;
each state transition is labelled as 'event / reaction'.
end legend

[*] --> accepted : incoming client connecton /\n accept

accepted : read HTTP CONNECT message

accepted --> connecting : received valid CONNECT message /\nprepare to start target connection
accepted ---> [*] : received invalid CONNECT message ||\n client connection closed /\nclose client connection

connecting : resolve the target hostname to IP address and \n try to establish TCP connection to target

connecting ---> [*] : hostname blacklisted ||\nfailed to connect to target /\nsend 404 response to client and close client connection

state tunneling {

    tunneling : Receiving from client and sending to target share the same buffer.
    tunneling : We alternate between receiving from client and sending to target.
    tunneling:
    tunneling : Receiving from target and sending to client share the same buffer.
    tunneling : We alternate between receiving from target and sending to client.
    tunneling :
    tunneling : However, receiving from and sending to the same host happens concurrently, because they use different buffers.

    send_to_target_and_send_to_client --> send_to_target_and_receive_from_target : sent to client /\nwait to receive from target
    send_to_target_and_send_to_client --> receive_from_client_and_send_to_client : sent to target /\nwait to receive from client

    send_to_target_and_receive_from_target --> receive_from_client_and_receive_from_target : sent to target /\nwait to receive from client
    send_to_target_and_receive_from_target --> send_to_target_and_send_to_client : received from target /\nwait to send to client

    receive_from_client_and_receive_from_target --> send_to_target_and_receive_from_target : received from client /\nwait to send to target
    receive_from_client_and_receive_from_target --> receive_from_client_and_send_to_client : received from target /\nwait to send to client

    receive_from_client_and_send_to_client --> receive_from_client_and_receive_from_target: sent to client /\nwait to receive from target
    receive_from_client_and_send_to_client --> send_to_target_and_send_to_client: received from client /\nwait to send to target

}

connecting --> send_to_target_and_send_to_client : target connected /\n send 200 Connection Established to client;\nsend any bytes read from client after CONNECT to target

tunneling --> [*] : either client connection or target connection is closed by the other party /\n close both connections gracefully

@enduml
