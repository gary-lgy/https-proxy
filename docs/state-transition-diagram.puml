@startuml

legend
cc (client connection) - TCP connection between client and proxy
tc (target connection) - TCP connection between proxy and target server
end legend

[*] --> accepted : incoming cc /\n accept cc

accepted : read HTTP CONNECT message

accepted --> connecting : received valid CONNECT message /\nstart tc
accepted --> [*] : received invalid CONNECT message ||\n cc closed by client /\nclose cc

connecting : resolve the target hostname to IP address and \n try to establish TCP connection to target

connecting --> [*] : failed to connect to target /\nsend 404 response to client and close cc

state tunneling {

    tunneling : reading from cc and writing to tc shares the same buffer
    tunneling : reading from tc and writing to cc shares the same buffer
    tunneling : if we're waiting to write to cc, don't read from tc
    tunneling : if we're waiting to write to tc, don't read from cc

    tc_rw : epoll_wait on [tc (waiting to receive and send)]
    cc_r_tc_r : epoll_wait on [cc(waiting to receive), tc (waiting to receive)]
    cc_w_tc_w : epoll_wait on [cc(waiting to send), tc (waiting to send)]
    cc_rw : epoll_wait on [cc (waiting to receive and send)]

    tc_rw --> cc_r_tc_r : sent to tc /\nwait to receive from cc
    tc_rw --> cc_w_tc_w : received from tc /\nwait to send to cc

    cc_r_tc_r --> tc_rw : received from cc /\nwait to send to tc
    cc_r_tc_r --> cc_rw : received from tc /\nwait to send to cc

    cc_w_tc_w --> tc_rw : sent to cc /\nwait to receive from tc
    cc_w_tc_w --> cc_rw : sent to tc /\nwait to receive from cc

    cc_rw --> cc_r_tc_r: sent to cc /\nwait to receive from tc
    cc_rw --> cc_w_tc_w: received from cc /\nwait to send to tc
}

connecting ---> cc_w_tc_w : tc connected /\n send 200 Connection Established to client;\n any bytes read from client after CONNECT to target

tunneling --> [*] : either cc or tc is closed by the other party /\n close cc and tc

@enduml
