@startuml

legend
cc (client connection) - TCP connection between client and proxy
tc (target connection) - TCP connection between proxy and target server
end legend

[*] --> accepted : incoming cc /\n accept cc

accepted : epoll_wait on [cc (for reading HTTP CONNECT)]

accepted --> connecting : received valid CONNECT message /\nstart tc
accepted --> [*] : received invalid CONNECT message ||\n cc closed by client /\nclose cc

connecting : epoll_wait on [tc (for successful TCP connection) cc (in case the client closes cc)]

connecting --> [*] : cc closed by client/\nclose cc
connecting --> [*] : failed to connect to target /\nsend 404 response to client and close cc

connecting --> connected : tc connected

connected : epoll_wait on [cc (for sending 200 OK to client) and tc (in case the client closes cc)]

connected --> [*] : sending 200 response failed || tc closed by target/\nclose cc and tc

state tunneling {

    tunneling : reading from cc and writing to tc shares the same buffer
    tunneling : reading from tc and writing to cc shares the same buffer
    tunneling : if we're waiting to write to cc, don't read from tc
    tunneling : if we're waiting to write to tc, don't read from cc

    tc_rw : epoll_wait on [tc (waiting to read and write)]
    cc_r_tc_r : epoll_wait on [cc(waiting to read), tc (waiting to read)]
    cc_w_tc_w : epoll_wait on [cc(waiting to write), tc (waiting to write)]
    cc_rw : epoll_wait on [cc (waiting to read and write)]

    tc_rw --> cc_r_tc_r : wrote to tc /\nread from cc
    tc_rw --> cc_w_tc_w : read from tc /\nwrite to cc

    cc_r_tc_r --> tc_rw : read from cc /\nwrite to tc
    cc_r_tc_r --> cc_rw : read from tc /\nwrite to cc

    cc_w_tc_w --> tc_rw : wrote to cc /\nread from tc
    cc_w_tc_w --> cc_rw : wrote to tc /\nread from cc

    cc_rw --> cc_r_tc_r: wrote to cc /\nread from tc
    cc_rw --> cc_w_tc_w: read from cc /\nwrite to tc
}

connected --> tc_rw : sending 200 response succeeded /\nsend the bytes right after CONNECT, if any

tunneling -> [*] : either cc or tc is closed by the other party /\n close cc and tc

@enduml
